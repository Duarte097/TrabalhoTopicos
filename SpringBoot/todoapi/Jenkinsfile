pipeline {
    agent any

    stages {
        stage('Checkout SCM') {
            steps {
                // Realiza o checkout do código-fonte do repositório Git
                checkout scm
            }
        }

        stage('Remover Imagem e Container Existentes') {
            steps {
                script {
                    // Verifica se o container 'todoapi' existe e o remove se necessário
                    def containerExists = bat(script: 'docker ps -a | findstr todoapi', returnStatus: true) == 0
                    if (containerExists) {
                        bat 'docker rm -f todoapi'
                    } else {
                        echo 'Container não existe.'
                    }

                    // Verifica se a imagem 'todoapi-spring-app' existe e a remove se necessário
                    def imageExists = bat(script: 'docker images | findstr todoapi-spring-app', returnStatus: true) == 0
                    if (imageExists) {
                        bat 'docker rmi -f todoapi-spring-app'
                    } else {
                        echo 'Imagem não existe.'
                    }
                }
            }
        }

        stage('Build da Imagem Docker') {
            steps {
                // Executa o build da imagem Docker a partir do Dockerfile no diretório correto
                dir('TrabalhoTopicos/SpringBoot/todoapi/') {
                    bat 'docker build -t mysql .'
                }
            }
        }

        stage('Iniciar Container Docker') {
            steps {
                // Inicia o container Docker a partir da imagem criada
                bat 'start /b docker run -d --name todoapi mysql'
            }
        }
    }

    post {
        failure {
            // Em caso de falha, envia um e-mail de notificação
            emailext (
                subject: "Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' failed",
                body: "Please go to ${env.BUILD_URL} and verify the build",
                to: 'bioshock197@gmail.com'
            )
        }
    }
}
